import unittest

from crypto.keyring import \
    generate_key


class KeyDerivation(unittest.TestCase):
    def test_key_generation(self):
        """
        Generate some keys using predefined passwords and salts.
        Checks generated keys against known correct values.
        """

        for p_index, p in enumerate(self.passwords):
            for s_index, s in enumerate(self.salts):
                key, salt = generate_key(p, s)
                self.assertEqual(s, salt)
                self.assertEqual(key, self.keys[p_index][s_index])

    def test_salt_verification(self):
        """
        Verifies that trying to generate a key using an invalid salt actually
        generates a new valid salt.
        """
        password_sample = b'0000010100111001'

        # trying to generate a key without salt
        key, salt = generate_key(password_sample)

        repeat_key, repeat_salt = generate_key(password_sample, salt)
        self.assertEqual(key, repeat_key)
        self.assertEqual(salt, repeat_salt)

        # trying to use empty string as salt
        invalid_salt = ''
        key, salt = generate_key(password_sample, invalid_salt)
        self.assertNotEqual(salt, invalid_salt)

        repeat_key, repeat_salt = generate_key(password_sample, salt)
        self.assertEqual(key, repeat_key)
        self.assertEqual(salt, repeat_salt)

        # trying to use dict as salt
        invalid_salt = {'dict': 'not allowed'}
        key, salt = generate_key(password_sample, invalid_salt)
        self.assertNotEqual(salt, invalid_salt)

        repeat_key, repeat_salt = generate_key(password_sample, salt)
        self.assertEqual(key, repeat_key)
        self.assertEqual(salt, repeat_salt)

        # trying to use a salt too small
        invalid_salt = b'ogg'
        key, salt = generate_key(password_sample, invalid_salt)
        self.assertNotEqual(salt, invalid_salt)

        repeat_key, repeat_salt = generate_key(password_sample, salt)
        self.assertEqual(key, repeat_key)
        self.assertEqual(salt, repeat_salt)

        # trying to use a salt too big
        invalid_salt = b'ogg_jj_kk_ll_oo_99_aa_ii_88_kk_12_77_99_00_!!_!!'
        key, salt = generate_key(password_sample, invalid_salt)
        self.assertNotEqual(salt, invalid_salt)

        repeat_key, repeat_salt = generate_key(password_sample, salt)
        self.assertEqual(key, repeat_key)
        self.assertEqual(salt, repeat_salt)

    def setUp(self):
        self.passwords = [
            b"such_a_secret_pass.!1s4d23",
            b"1910ehA232!SNJK#2P",
            b"98.zx&8A(9g08S(*ADb n ."
        ]

        self.salts = [
            bytes([0xa4, 0xc3, 0xc0, 0xe7, 0xbc, 0x2a, 0xbf, 0xd5,
                   0xc6, 0xe6, 0x8f, 0xed, 0x00, 0xea, 0x0c, 0x7c]),
            bytes([0xdc, 0xd2, 0x49, 0x2a, 0xf1, 0x33, 0x09, 0xc2,
                   0x06, 0x40, 0x24, 0xdd, 0xb7, 0x95, 0xc7, 0x32]),
            bytes([0x51, 0xe1, 0x62, 0x4a, 0x2b, 0xa9, 0x21, 0xad,
                   0xc2, 0xe8, 0x38, 0x42, 0xce, 0x1f, 0xc0, 0xdf]),
            bytes([0x4f, 0xec, 0xea, 0xe3, 0xbc, 0xfb, 0x13, 0x8b,
                   0xe4, 0x71, 0xc6, 0xf5, 0xbc, 0x4c, 0xe0, 0x6f]),
            bytes([0x10, 0xb9, 0x6d, 0x7e, 0xd9, 0x32, 0x54, 0x73,
                   0xef, 0x48, 0x87, 0x33, 0x5e, 0x44, 0x19, 0x56])
        ]

        self.keys = [
            [
                bytes([0x3c, 0x04, 0xfd, 0x4e, 0x4f, 0xe0, 0xf5, 0xa6,
                       0x4d, 0xf7, 0x00, 0x51, 0x9b, 0x94, 0xe0, 0x27,
                       0xc9, 0x17, 0x01, 0x9a, 0xae, 0xf2, 0x55, 0x0f,
                       0x59, 0x67, 0x56, 0x9a, 0xba, 0x3e, 0x66, 0xee,
                       ]),
                bytes([0xaa, 0xf1, 0x0c, 0x74, 0xc2, 0x5a, 0x5b, 0x96,
                       0xed, 0x1e, 0x06, 0xfd, 0x8a, 0x92, 0x94, 0xcb,
                       0x08, 0x5f, 0xaf, 0x25, 0x5b, 0x23, 0x3d, 0xcf,
                       0xf2, 0x4a, 0x48, 0xd7, 0x20, 0x4c, 0x94, 0x69,
                       ]),
                bytes([0xf3, 0xa0, 0x00, 0xe8, 0x3e, 0x76, 0x8b, 0xfc,
                       0xa5, 0xe4, 0x60, 0xf4, 0x11, 0x29, 0x19, 0x37,
                       0xe0, 0x2a, 0x52, 0x54, 0x7e, 0x93, 0xf9, 0x68,
                       0x68, 0x6f, 0x87, 0xbb, 0xd4, 0x1b, 0xd1, 0xb4,
                       ]),
                bytes([0x48, 0x4c, 0x83, 0xf4, 0xf8, 0x36, 0x38, 0xc2,
                       0x59, 0xdb, 0xac, 0x67, 0x44, 0xc0, 0x65, 0xf5,
                       0x4b, 0x8d, 0xfc, 0xc9, 0xa1, 0x5d, 0x98, 0x99,
                       0x7e, 0x8c, 0x7d, 0xf0, 0x6e, 0x94, 0x69, 0xe9,
                       ]),
                bytes([0x7b, 0x8c, 0x99, 0xd9, 0x84, 0x48, 0x02, 0x4c,
                       0x51, 0x7c, 0xa5, 0x88, 0x79, 0xdb, 0x99, 0x47,
                       0xc3, 0x92, 0x80, 0xfb, 0x62, 0xa4, 0x75, 0x57,
                       0x78, 0xc8, 0x90, 0x46, 0xdf, 0x88, 0x86, 0x99,
                       ])
            ],
            [
                bytes([0xd4, 0xa2, 0x2a, 0x4e, 0x12, 0x5c, 0x84, 0xfa,
                       0x86, 0x24, 0x91, 0xcc, 0x70, 0x31, 0x3f, 0x6d,
                       0x91, 0x68, 0x7d, 0xc6, 0x86, 0xf7, 0xae, 0x5d,
                       0x17, 0x51, 0xb0, 0xef, 0xa4, 0x42, 0xbd, 0x42,
                       ]),
                bytes([0x53, 0x08, 0x9a, 0x13, 0xd4, 0xf4, 0xaa, 0xaf,
                       0xa2, 0xb9, 0x19, 0x97, 0xfc, 0x15, 0x3b, 0x38,
                       0x7e, 0x2f, 0x9a, 0x43, 0x82, 0x38, 0x12, 0xd9,
                       0xa3, 0x1d, 0x5f, 0x7c, 0x0e, 0xf2, 0xf8, 0x3f,
                       ]),
                bytes([0xd4, 0x01, 0x1e, 0x2e, 0xdf, 0x43, 0xab, 0xea,
                       0x5e, 0xc5, 0xa4, 0xe5, 0x0d, 0xa6, 0x87, 0x00,
                       0x78, 0xd3, 0xfc, 0xcc, 0x18, 0x2e, 0x90, 0x3f,
                       0x81, 0x2d, 0x51, 0x1f, 0xb9, 0xf2, 0x79, 0xfb,
                       ]),
                bytes([0xc5, 0xc6, 0x60, 0x88, 0xb8, 0xc6, 0xa6, 0xc7,
                       0xb4, 0x8b, 0x09, 0x54, 0x7c, 0x5a, 0x63, 0x6e,
                       0x2d, 0xa1, 0x3e, 0xa5, 0xa6, 0xee, 0xa4, 0x2e,
                       0x9c, 0x78, 0x66, 0xc9, 0x9b, 0x0a, 0xf0, 0x67,
                       ]),
                bytes([0x9a, 0x96, 0xa1, 0xc6, 0xa8, 0xb2, 0x6e, 0x62,
                       0x76, 0x81, 0x5b, 0x48, 0xed, 0x4a, 0xee, 0x0d,
                       0xbe, 0xf6, 0x59, 0xe9, 0x63, 0xe0, 0x3a, 0x14,
                       0x59, 0xde, 0x70, 0xcd, 0xe7, 0x49, 0x03, 0xe3,
                       ])
            ],
            [
                bytes([0x4c, 0x74, 0xff, 0xa4, 0x82, 0xbe, 0xa4, 0x7f,
                       0x7b, 0x53, 0x43, 0xfb, 0x1a, 0xd6, 0x89, 0x93,
                       0xe5, 0x46, 0xd2, 0x9a, 0xf8, 0x1a, 0x08, 0x6e,
                       0x05, 0x21, 0x06, 0xc8, 0x6b, 0x64, 0x96, 0x2a,
                       ]),
                bytes([0x16, 0xa4, 0x6d, 0x14, 0x8a, 0x70, 0x90, 0x20,
                       0x7b, 0x2c, 0x09, 0x23, 0x1b, 0x73, 0x59, 0x77,
                       0xb8, 0x72, 0x53, 0x80, 0xd8, 0x40, 0x5e, 0x3c,
                       0xa0, 0x62, 0x09, 0x10, 0xd6, 0x35, 0xe7, 0x3f,
                       ]),
                bytes([0x32, 0x7c, 0x08, 0x6d, 0x30, 0x84, 0x32, 0x5b,
                       0x1a, 0x20, 0x80, 0xd1, 0xe2, 0xca, 0x5d, 0x7b,
                       0x48, 0xaf, 0xf0, 0x43, 0x44, 0x16, 0xcf, 0x38,
                       0x58, 0x0b, 0x38, 0xb3, 0xd8, 0x24, 0xbe, 0x19,
                       ]),
                bytes([0x6e, 0xf7, 0xf8, 0x0f, 0xe9, 0xba, 0x17, 0xf7,
                       0xd4, 0xc1, 0xf0, 0x7e, 0xc7, 0xab, 0x66, 0x66,
                       0xef, 0xa2, 0x01, 0x93, 0xa9, 0xeb, 0xf0, 0x5f,
                       0x37, 0x70, 0x60, 0x7a, 0xf5, 0x8d, 0x9e, 0x1e,
                       ]),
                bytes([0x77, 0x1c, 0xff, 0xa7, 0x90, 0x8c, 0x57, 0xce,
                       0xa8, 0x8e, 0x9c, 0x5b, 0xfb, 0x9d, 0x8a, 0xe5,
                       0x04, 0x75, 0xcd, 0x66, 0x34, 0x05, 0x05, 0x74,
                       0xf4, 0x4a, 0x65, 0x08, 0xd4, 0x58, 0x48, 0x82,
                       ])
            ]
        ]

        return super().setUp()
