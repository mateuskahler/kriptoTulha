import unittest

from crypto.stamp import \
    generate_integrity_stamp, validate_integrity_stamp


class IntegrityStamp(unittest.TestCase):
    def test_stamp_generation(self):
        """
        Verifies that new integrity stamps - generated using the predefined
        messages and keys - are evaluated as valid
        stamps.
        """
        for msg_value in self.messages:
            for key_value in self.keys:
                stamp = generate_integrity_stamp(msg_value, key_value)

                self.assertTrue(validate_integrity_stamp(
                    msg_value, stamp, key_value))

    def test_precalculated_stamp_validation(self):
        """
        Verifies that predefined integrity stamps - generated using the
        predefined messages and keys - are evaluated as
        valid stamps.
        """

        for msg_index, msg_value in enumerate(self.messages):
            for key_index, key_value in enumerate(self.keys):
                calculated_stamp = self.stamps[msg_index][key_index]

                self.assertTrue(validate_integrity_stamp(
                    msg_value, calculated_stamp, key_value))

    def test_stamp_refutal(self):
        """
        Checks if inverting a single bit in predefined integrity stamps -
        generated using the predefined messages and keys - causes corrupted
        keys to evaluate as invalid.
        """

        for msg_index, msg_value in enumerate(self.messages):
            for key_index, key_value in enumerate(self.keys):
                expected_stamp = self.stamps[msg_index][key_index]
                corrupted_stamp = IntegrityStamp.corrupt_stamp(expected_stamp)

                self.assertFalse(validate_integrity_stamp(
                    msg_value, corrupted_stamp, key_value))

    def corrupt_stamp(stamp: bytes) -> bytes:
        new_stamp = bytearray(stamp)
        new_stamp[0] ^= 1

        return bytes(new_stamp)

    def setUp(self):
        self.messages = [
            'This is a test message with known validity stamp!'.encode(
                encoding='UTF-8'),
            'Another sample message including a koala: ʕ •ᴥ•ʔ'.encode(
                encoding='UTF-8'),
            bytes([0xad, 0xf3, 0x3a, 0xe0, 0x2e, 0x82, 0x9a, 0xb3,
                   0x9d, 0xef, 0x5e, 0x59, 0xb9, 0x42, 0xfd, 0x8b,
                   0xe7, 0xf4, 0xca, 0xb7, 0x0e, 0xde, 0x92, 0x8f,
                   0xdc, 0x34, 0xff, 0xc7, 0xc7, 0x2b, 0xd9, 0xdd]),
        ]

        self.keys = [
            bytes([0xc6, 0x9d, 0x11, 0x5e, 0x6f, 0x74, 0x7c, 0x0c,
                   0x6f, 0x12, 0x05, 0x9a, 0x2a, 0x1b, 0xd8, 0xc2,
                   0xf9, 0x2c, 0x86, 0xba, 0x66, 0x59, 0x52, 0xbb,
                   0x4e, 0x80, 0x9f, 0x22, 0x9d, 0x07, 0x5a, 0x46]),
            bytes([0x58, 0x50, 0xcb, 0x39, 0xce, 0xcf, 0x29, 0x2a,
                   0x7c, 0xed, 0x32, 0x60, 0xa3, 0x67, 0xdc, 0x43,
                   0x39, 0xff, 0x16, 0x5f, 0x22, 0x2f, 0x13, 0x07,
                   0x20, 0x5c, 0xd0, 0x67, 0x2f, 0xf4, 0x7b, 0x7b]),
            bytes([0xd7, 0xb1, 0x67, 0xc9, 0x5f, 0xcb, 0x21, 0x51,
                   0x4e, 0x75, 0xfd, 0xce, 0x15, 0x43, 0x80, 0xd1,
                   0xcf, 0xad, 0x8c, 0x6b, 0xbd, 0xd8, 0x6c, 0xc0,
                   0xe5, 0x5e, 0xe2, 0x5a, 0x9e, 0x11, 0x80, 0x4a])
        ]

        # list of valid stamps for each message in self.messages,
        # using each key in self.keys.
        # Ordered as in stamp[message_index][key_index]
        self.stamps = [
            [
                bytes([0x2e, 0xe1, 0x26, 0x6a, 0x7d, 0x3b, 0xb7, 0x9f,
                       0x7c, 0x33, 0x06, 0x8d, 0xb5, 0x72, 0x01, 0x21,
                       0x9b, 0xa0, 0xb6, 0xea, 0xd7, 0xc2, 0xad, 0x56,
                       0x46, 0x65, 0x7b, 0x7f, 0xb5, 0xbc, 0xa1, 0x96,
                       0x94, 0x6c, 0x8f, 0xde, 0x1b, 0xdc, 0x4a, 0x27,
                       0xbe, 0x1c, 0x4a, 0xfb, 0xdc, 0xa8, 0x10, 0xd0,
                       0x67, 0xc1, 0x5d, 0xf6, 0x6f, 0x9e, 0x96, 0xf5,
                       0x33, 0xff, 0xf7, 0xeb, 0x85, 0x95, 0x3c, 0x8f,
                       0xe0, 0xc0, 0x24, 0x6b, 0x0c, 0x3b, 0x82, 0xfb,
                       0x0f, 0xd1, 0x01, 0x4d, 0xcf, 0x49, 0x78, 0xec,
                       ]),
                bytes([0x81, 0xbd, 0xd8, 0xf3, 0x8a, 0x3e, 0xa5, 0xd2,
                       0x5c, 0xb1, 0x98, 0xa4, 0x1e, 0xa7, 0x79, 0x4d,
                       0x46, 0x00, 0x82, 0xc6, 0x2b, 0x29, 0x17, 0x7d,
                       0x82, 0xe3, 0xfb, 0x57, 0x77, 0xff, 0xfa, 0xa1,
                       0x1b, 0xb3, 0x58, 0x35, 0xf0, 0xbd, 0xfb, 0xfe,
                       0x96, 0x4a, 0x87, 0x58, 0xe0, 0xe7, 0xc3, 0x80,
                       0x4d, 0x67, 0xbc, 0xee, 0xa8, 0x15, 0xe5, 0xf8,
                       0x35, 0x25, 0xe3, 0x20, 0xa4, 0x80, 0x07, 0x16,
                       0x3d, 0x10, 0xa2, 0x6a, 0xe5, 0xcb, 0x3a, 0x91,
                       0xa7, 0x56, 0xab, 0x91, 0xc0, 0x92, 0x76, 0x01,
                       ]),
                bytes([0x8b, 0x4b, 0x1c, 0x5c, 0xbe, 0x3a, 0x3d, 0x18,
                       0x83, 0x5d, 0xe9, 0x88, 0x11, 0x09, 0x38, 0x13,
                       0xb7, 0xfc, 0x42, 0xaa, 0xc1, 0xd2, 0x90, 0xec,
                       0x60, 0xc5, 0x1f, 0x6f, 0x2d, 0xe4, 0xab, 0xd7,
                       0xa3, 0xf9, 0x7e, 0x2e, 0x65, 0x50, 0xb5, 0xa9,
                       0x69, 0x19, 0x98, 0xef, 0xe8, 0xca, 0x37, 0xf8,
                       0x0e, 0x8f, 0xb3, 0x0a, 0x7b, 0x81, 0xbb, 0xac,
                       0x66, 0xca, 0x35, 0xc1, 0x40, 0x2a, 0x3d, 0x98,
                       0xe8, 0xc2, 0xbd, 0x16, 0x88, 0x47, 0x7e, 0x30,
                       0x7c, 0x61, 0x6a, 0x9c, 0x30, 0x9f, 0x51, 0x20,
                       ])
            ],
            [
                bytes([0xec, 0x20, 0x13, 0x21, 0xfd, 0xb0, 0x16, 0xd3,
                       0xff, 0xff, 0xda, 0xbc, 0xd2, 0x29, 0xa2, 0x68,
                       0x38, 0xf1, 0xed, 0xd9, 0xe3, 0xb4, 0x43, 0x84,
                       0xe4, 0xc9, 0xd2, 0xa9, 0x8a, 0x49, 0x37, 0x08,
                       0x10, 0x1e, 0x31, 0xff, 0xf2, 0x2d, 0xaf, 0xe5,
                       0x1a, 0xe3, 0xae, 0x21, 0xca, 0x34, 0xfa, 0xa5,
                       0xbe, 0x9e, 0x57, 0x00, 0xc6, 0x18, 0x4b, 0x17,
                       0x39, 0xfa, 0xc1, 0x7d, 0x89, 0xf7, 0xc6, 0x85,
                       0x52, 0xc0, 0xd6, 0xba, 0x57, 0xfe, 0xfa, 0x2c,
                       0x97, 0x5c, 0xbe, 0x64, 0x76, 0x3e, 0x41, 0x55,
                       ]),
                bytes([0xf6, 0xad, 0x74, 0xd2, 0xfc, 0x1b, 0x98, 0x27,
                       0xdb, 0x19, 0x22, 0x57, 0xcb, 0xc0, 0x82, 0x31,
                       0x0d, 0xfd, 0x35, 0x5a, 0x93, 0x5d, 0x2f, 0x10,
                       0xe0, 0x97, 0x16, 0x86, 0xbe, 0x08, 0x32, 0x0f,
                       0x4a, 0xa2, 0x62, 0x54, 0xcb, 0xc3, 0x13, 0x59,
                       0x00, 0x98, 0x52, 0xef, 0xeb, 0xd2, 0x87, 0x3f,
                       0xb4, 0x12, 0x57, 0x05, 0xbb, 0x90, 0x2b, 0xc4,
                       0x8f, 0xf7, 0xa2, 0x18, 0xea, 0xa5, 0x1e, 0xa1,
                       0x3c, 0xfa, 0xde, 0x9e, 0x55, 0x4d, 0x4c, 0x23,
                       0x53, 0x60, 0xf8, 0x30, 0x6a, 0x7e, 0x82, 0xff,
                       ]),
                bytes([0xdc, 0x3f, 0x5f, 0x61, 0x8d, 0xa7, 0x6c, 0x50,
                       0x8d, 0xea, 0xdc, 0x38, 0x05, 0x01, 0x3b, 0xdf,
                       0xf8, 0xe7, 0x30, 0x24, 0xb5, 0xa1, 0xd6, 0x9c,
                       0xf7, 0x62, 0x0f, 0x8a, 0x20, 0x82, 0x1c, 0xfa,
                       0x4d, 0xe8, 0x74, 0xac, 0x3a, 0x52, 0xa6, 0x46,
                       0x59, 0x46, 0x8b, 0x21, 0xc4, 0xb6, 0xb1, 0x2c,
                       0x5a, 0x9b, 0x66, 0xb1, 0x67, 0x03, 0xb7, 0xe6,
                       0x04, 0x99, 0x2b, 0x4d, 0x39, 0x9c, 0x07, 0xf9,
                       0xcb, 0xfc, 0x76, 0x44, 0x39, 0x19, 0x55, 0xf8,
                       0x10, 0xb4, 0xec, 0xae, 0x5b, 0x36, 0x3d, 0x6c,
                       ])
            ],
            [
                bytes([0x72, 0x3f, 0xf1, 0x06, 0x52, 0x11, 0x0f, 0x06,
                       0x9e, 0xc3, 0x2b, 0x88, 0x1b, 0x29, 0xb1, 0x5b,
                       0xea, 0xe1, 0xf6, 0xa1, 0xba, 0xb2, 0xfe, 0x17,
                       0xd3, 0x44, 0x96, 0x17, 0x30, 0x77, 0xf3, 0x1f,
                       0x89, 0x93, 0x8e, 0x29, 0x9c, 0x54, 0xd0, 0xa8,
                       0xd4, 0x83, 0x4a, 0x2c, 0x0b, 0x08, 0x86, 0xd1,
                       0xa1, 0x79, 0x5b, 0xdf, 0x6f, 0xd1, 0x57, 0xe0,
                       0xc9, 0x3c, 0x06, 0x4f, 0x12, 0x24, 0x1d, 0x37,
                       0xda, 0x7b, 0xf8, 0xb6, 0xd6, 0xf0, 0x91, 0xab,
                       0x32, 0x05, 0x83, 0xbb, 0x3e, 0x82, 0xe6, 0xda,
                       ]),
                bytes([0x8b, 0x1d, 0x95, 0x72, 0x92, 0xd0, 0x2a, 0x3e,
                       0xde, 0xcc, 0x10, 0x55, 0x3b, 0xc4, 0x15, 0x3b,
                       0x97, 0xa4, 0x0b, 0x56, 0x58, 0x89, 0x8e, 0x01,
                       0x6c, 0x4f, 0xf4, 0x60, 0x53, 0x30, 0x39, 0xd0,
                       0xd6, 0x6e, 0x74, 0x02, 0x52, 0xc5, 0xc9, 0x3c,
                       0xbf, 0x0d, 0x92, 0x8c, 0x02, 0x6c, 0x3f, 0x93,
                       0x25, 0x47, 0x61, 0x0f, 0x59, 0x89, 0xb3, 0xf3,
                       0xf3, 0x1d, 0x79, 0x05, 0xac, 0x57, 0x62, 0xec,
                       0xbc, 0x2c, 0xfc, 0x85, 0x21, 0x61, 0xda, 0xb7,
                       0x77, 0x37, 0xf4, 0x6b, 0xe3, 0x38, 0xad, 0x1f,
                       ]),
                bytes([0xf4, 0xb9, 0x97, 0x7a, 0xe5, 0xa3, 0x88, 0x06,
                       0x25, 0xbc, 0x8f, 0x1d, 0x87, 0xa4, 0xee, 0x85,
                       0x8a, 0x2b, 0x60, 0x34, 0x23, 0xdd, 0xc8, 0x80,
                       0xcb, 0xa6, 0x03, 0x39, 0xf9, 0xae, 0xe7, 0xd9,
                       0x11, 0x5e, 0x9e, 0x1c, 0x8f, 0x43, 0x28, 0x8e,
                       0xa5, 0x79, 0x27, 0x8c, 0x71, 0xd2, 0x74, 0x4d,
                       0xf9, 0x0f, 0xab, 0x0c, 0x2d, 0xd6, 0x1e, 0x91,
                       0xca, 0xc8, 0x9c, 0x9e, 0x81, 0xd6, 0xde, 0x6d,
                       0x1b, 0xc0, 0xd1, 0xfe, 0xbd, 0x41, 0xe8, 0xbd,
                       0x87, 0xa9, 0x43, 0x09, 0x45, 0x96, 0xbd, 0x4b,
                       ])
            ],
        ]

        return super().setUp()
